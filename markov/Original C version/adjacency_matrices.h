// Define adjacency matrices for different types of output and one empty matrix which will be filled in later
int adjacency_matrix_A[12][12] = {                                              // Matrix A for step-wise diatonic output
//   C  C# D  D# E  F  F# G  G# A  A# B
    {1, 0, 4, 0, 3, 2, 0, 1, 0, 0, 0, 0}, // C         This matrix favours neighbouring steps with high probabilities,
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // C#        upward rather than downward movement, and excludes tritones.
    {3, 0, 1, 0, 4, 3, 0, 2, 0, 1, 0, 1}, // D
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // D#
    {2, 0, 3, 0, 1, 4, 0, 3, 0, 2, 0, 1}, // E
    {1, 0, 2, 0, 3, 1, 0, 4, 0, 3, 0, 0}, // F
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // F#
    {1, 0, 1, 0, 2, 3, 0, 1, 0, 4, 0, 3}, // G
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // G#
    {0, 0, 1, 0, 1, 2, 0, 3, 0, 1, 0, 4}, // A
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // A#
    {0, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 1}  // B
};

int adjacency_matrix_B[12][12] = {                                              // Matrix B for random diatonic output
//   C  C# D  D# E  F  F# G  G# A  A# B
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // C         This matrix defines an equal distribution of diatonic progressions.
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // C#
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // D
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // D#
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // E
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // F
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // F#
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // G
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // G#
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, // A
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // A#
    {1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}  // B
};

int adjacency_matrix_C[12][12] = {                                              // Matrix C for random chromatic output
//   C  C# D  D# E  F  F# G  G# A  A# B
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // C         This matrix defines an equal distribution of chromatic progressions.
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // C#
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // D
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // D#
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // E
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // F
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // F#
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // G
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // G#
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // A
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // A#
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}  // B
};

int adjacency_matrix_D[12][12] = {                                              // Matrix D for random octatonic output
//   C  C# D  D# E  F  F# G  G# A  A# B
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // C         This matrix defines an equal distribution of chromatic progressions.
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // C#
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // D
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // D#
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // E
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // F
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // F#
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // G
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // G#
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // A
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}, // A#
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0}  // B
};

int adjacency_matrix_E[12][12] = {                                              // Matrix E for diatonic stepwise motion
//   C  C# D  D# E  F  F# G  G# A  A# B
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // C
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // C#
    {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, // D
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // D#
    {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0}, // E
    {0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0}, // F
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // F#
    {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, // G
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // G#
    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1}, // A
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // A#
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}  // B
};